---
title: "Univariate Viz"
number-sections: true
execute: 
  warning: false
  fig-height: 2.75
  fig-width: 4.25
  fig-env: 'figure'
  fig-pos: 'h'
  fig-align: center
  code-fold: false
  eval: true
---
### Import data
```{r}
hikes <- read.csv("https://mac-stat.github.io/data/high_peaks.csv")
```

```{r}
#| eval: true
#| message: false

library(tidyverse)
```

### Exercise 1: Research Questions {.unnumbered}

Let's dig into the `hikes` data, starting with the `elevation` and difficulty `ratings` of the hikes:

a.  What features would we like a visualization of the *categorical* difficulty `rating` variable to capture?

Using a bar chart for the three categories: easy, moderate, and difficult.

b.  What about a visualization of the *quantitative* `elevation` variable?

Use a histogram to show the difference in heights.



### Exercise 2: Load tidyverse {.unnumbered}

We'll address the above questions using `ggplot` tools. Try running the following chunk and simply take note of the error message -- this is one you'll get a lot!

```{r}
# Use the ggplot function
ggplot(hikes, aes(x = rating))
```

In order to use `ggplot` tools, we have to first *load* the `tidyverse` package in which they live. We've *installed* the package but we need to tell R when we want to *use* it. Run the chunk below to load the library. You'll need to do this within any .qmd file that uses `ggplot()`.

```{r}
#| eval: true
#| message: false

library(tidyverse)
```



### Exercise 3: Bar Chart of Ratings - Part 1 {.unnumbered}

Consider some specific research questions about the difficulty `rating` of the hikes:

1. How many hikes fall into each category?

Three on 'moderate', two on 'difficult', and one on 'easy'

2. Are the hikes evenly distributed among these categories, or are some more common than others?

Moderate is more common than easy.

All of these questions can be answered with: (1) a **bar chart**; of (2) the *categorical* data recorded in the `rating` column. First, set up the plotting **frame**:

```{r}
ggplot(hikes, aes(x = rating))
```

Think about:

-   What did this do? What do you observe?

Generates an empty bar chart with all categories in 'rating' on x-axis

-   What, in general, is the first argument of the `ggplot()` function?

The dataset used for plot

-   What is the purpose of writing `x = rating`?

Assigns the x-axis to the category 'rating'

-   What do you think `aes` stands for?!?

Aesthetics


### Exercise 4: Bar Chart of Ratings - Part 2 {.unnumbered}

Now let's add a **geometric layer** to the frame / canvas, and start customizing the plot's **theme**. To this end, try each chunk below, *one by one*. In each chunk, make a comment about how both the code and the corresponding plot both changed.

NOTE:

-   Pay attention to the general code properties and structure, not memorization.
-   Not all of these are "good" plots. We're just exploring `ggplot`.

```{r}
# geom_bar is added to the ggplot function; three bars were created with a y-axis defaulted as 'count'
ggplot(hikes, aes(x = rating)) +
  geom_bar()
```

```{r}
# labs() function is added. It labels the x and y axis
ggplot(hikes, aes(x = rating)) +
  geom_bar() +
  labs(x = "Rating", y = "Number of hikes")
```

```{r}
# fill = "blue" is added into the geom_bar as an argument. It fills the color(string) into the bar.
ggplot(hikes, aes(x = rating)) +
  geom_bar(fill = "blue") +
  labs(x = "Rating", y = "Number of hikes")
```

```{r}
# color = "orange" is added to geom_bar as an argument. It colors the frames of the bars.
ggplot(hikes, aes(x = rating)) +
  geom_bar(color = "orange", fill = "blue") +
  labs(x = "Rating", y = "Number of hikes")
```

```{r}
# theme_minimal() is added. It changes the background color to white
ggplot(hikes, aes(x = rating)) +
  geom_bar(color = "orange", fill = "blue")  +
  labs(x = "Rating", y = "Number of hikes") +
  theme_minimal()
```



### Exercise 5: Bar Chart Follow-up {.unnumbered}

#### Part a {.unnumbered}

Reflect on the `ggplot()` code.

-   What's the purpose of the `+`? When do we use it?

Add an element to the graph.

-   We added the bars using `geom_bar()`? Why "geom"?

Geom mean geometry. Geometry

-   What does `labs()` stand for?

Labels

-   What's the difference between `color` and `fill`?

Fill is filling the inside of something, while color only changes the color of the outline.

#### Part b {.unnumbered}

In general, bar charts allow us to examine the following properties of a *categorical* variable:

-   **observed categories**: What categories did we observe?

rating of easy, moderate, and difficult

-   **variability between categories**: Are observations evenly spread out among the categories, or are some categories more common than others?

Moderate difficulty mountains are the most common, followed by easy. Difficult mountain is very rare.

We must then *translate* this information into the *context* of our analysis, here hikes in the Adirondacks. Summarize below what you learned from the bar chart, in context.

#### Part c {.unnumbered}

Is there anything you don't like about this barplot? For example: check out the x-axis again.

It would be better if it were easy-moderate-difficult.


### Exercise 6: Sad Bar Chart {.unnumbered}

Let's now consider some research questions related to the *quantitative* `elevation` variable:

1. Among the hikes, what's the *range* of elevation and how are the hikes *distributed* within this range (e.g. evenly, in clumps, "normally")?
2. What's a *typical* elevation?
3. Are there any *outliers*, i.e. hikes that have unusually high or low elevations?

Here:

-   Construct a **bar chart** of the *quantitative* `elevation` variable.

```{r}
ggplot(hikes, aes(x = elevation)) +
  geom_bar(color = "orange", fill = "blue")  +
  labs(x = "Elevation", y = "Number of hikes") +
  theme_minimal()
```

-   Explain why this might *not* be an effective visualization for this and other quantitative variables. (What questions does / doesn't it help answer?)

There are too many different heights.

```{r}
```



### Exercise 7: A Histogram of Elevation {.unnumbered}

Quantitative variables require different viz than categorical variables. Especially when there are many possible outcomes of the quantitative variable. It's typically insufficient to simply count up the number of times we've observed a particular outcome as the bar graph did above. It gives us a sense of ranges and typical outcomes, but not a good sense of how the observations are distributed across this range. We'll explore two methods for graphing quantitative variables: **histograms** and **density plots**.

**Histograms** are constructed by (1) dividing up the observed range of the variable into 'bins' of equal width; and (2) counting up the number of cases that fall into each bin. Check out the example below:

![](https://mac-stat.github.io/images/112/histogram_demo.png){width="50%"}

#### Part a {.unnumbered}

Let's dig into some details.

-   How many hikes have an elevation between 4500 and 4700 feet?

6

-   How many total hikes have an elevation of at least 5100 feet?

3

#### Part b {.unnumbered}

Now the bigger picture. In general, histograms allow us to examine the following properties of a *quantitative* variable:

-   **typical outcome:** Whereâ€™s the center of the data points? What's typical?

4700ft

-   **variability & range:** How spread out are the outcomes? What are the max and min outcomes?

It is clumped to the lower elevation region. Max is 3900-4100, 10, min is 5100-5300, 1

-   **shape:** How are values distributed along the observed range? Is the distribution symmetric, right-skewed, left-skewed, bi-modal, or uniform (flat)?

left-skewed

-   **outliers:** Are there any outliers, i.e. outcomes that are unusually large/small?

No.

We must then *translate* this information into the *context* of our analysis, here hikes in the Adirondacks. Addressing each of the features in the above list, summarize below what you learned from the histogram, in context.

The elevations are unevenly distributed. It is skewed to be lower and there are no significant outliers



### Exercise 8: Building Histograms - Part 1 {.unnumbered}

2-MINUTE CHALLENGE: Thinking of the bar chart code, try to *intuit* what line you can tack on to the below frame of `elevation` to add a histogram layer. Don't forget a `+`. If it doesn't come to you within 2 minutes, *no problem* -- all will be revealed in the next exercise.

```{r}
ggplot(hikes, aes(x = elevation)) + geom_histogram()
```


### Exercise 9: Building Histograms - Part 2 {.unnumbered}

Let's build some histograms. Try each chunk below, *one by one*. In each chunk, make a comment about how both the code and the corresponding plot both changed.

```{r}
# Creates a histogram
ggplot(hikes, aes(x = elevation)) +
  geom_histogram()
```

```{r}
# Let the boundary of the bars become white.
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white") 
```

```{r}
# Fill the inside of the bard blue
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", fill = "blue") 
```

```{r}
# Change the x-axis and y-axis
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white") +
  labs(x = "Elevation (feet)", y = "Number of hikes")
```

```{r}
# Change the width of each interval to 1000.
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", binwidth = 1000) +
  labs(x = "Elevation (feet)", y = "Number of hikes")
```

```{r}
# Change the interval to 5 
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", binwidth = 5) +
  labs(x = "Elevation (feet)", y = "Number of hikes")
```

```{r}
# Change the interval to 200
ggplot(hikes, aes(x = elevation)) +
  geom_histogram(color = "white", binwidth = 200) +
  labs(x = "Elevation (feet)", y = "Number of hikes")
```


### Exercise 10: Histogram Follow-up {.unnumbered}

-   What function added the histogram layer / geometry?

geom_histogram()

-   What's the difference between `color` and `fill`?

Color is for the borders of the bars, while fill is for the interior

-   Why does adding `color = "white"` improve the visualization?

It separates the bars.

-   What did `binwidth` do?

Change the intervals in between bars.

-   Why does the histogram become ineffective if the `binwidth` is too big (e.g. 1000 feet)?

Because there are too few categories

-   Why does the histogram become ineffective if the `binwidth` is too small (e.g. 5 feet)?

There are too many categories

### Exercise 11: Density Plots {.unnumbered}

**Density plots** are essentially smooth versions of the histogram. Instead of sorting observations into discrete bins, the "density" of observations is calculated across the entire range of outcomes. The greater the number of observations, the greater the density! The density is then scaled so that the area under the density curve **always equals 1** and the area under any fraction of the curve represents the fraction of cases that lie in that range.

Check out a density plot of elevation. Notice that the y-axis (density) has no contextual interpretation -- it's a relative measure. The *higher* the density, the more *common* are elevations in that range.

```{r}
ggplot(hikes, aes(x = elevation)) +
  geom_density()
```

**Questions**

-   INTUITION CHECK: Before tweaking the code and thinking back to `geom_bar()` and `geom_histogram()`, how do you *anticipate* the following code will change the plot?

Line will be blue and area under curve will be orange.

    -   `geom_density(color = "blue")`
    -   `geom_density(fill = "orange")`

-   TRY IT! Test out those lines in the chunk below. Was your intuition correct?

```{r}
ggplot(hikes, aes(x = elevation)) +
  geom_density(color = "blue", fill = "orange")
```

-   Examine the density plot. How does it compare to the histogram? What does it tell you about the *typical* elevation, *variability / range* in elevations, and *shape* of the distribution of *elevations* within this range?

It is continuous compared to the density. The most typical elebation is around 4200 fts. Range is from around 3800-5300. Shape is skewed to the left. 

### Exercise 12: Density Plots vs Histograms {.unnumbered}

The histogram and density plot both allow us to visualize the behavior of a quantitative variable: typical outcome, variability / range, shape, and outliers. What are the pros/cons of each? What do you like/not like about each?

Histograms give exact number of all elevation, but doesn't give a continuous graph.
Density gives continuous graph. But it is less straighforward in terms of number of each category.

### Exercise 13: Code = communication {.unnumbered}

We *obviously* won't be done until we talk about communication. All code above has a similar *general* structure (where the details can change):

```{r}
#| eval: false

ggplot(___, aes(x = ___)) + 
  geom___(color = "___", fill = "___") + 
  labs(x = "___", y = "___")
```

-   Though not *necessary* to the code working, it's common, good practice to *indent* or *tab* the lines of code after the first line (counterexample below). Why?

The style of the code is bad without indents

```{r}
# YUCK
ggplot(hikes, aes(x = elevation)) +
geom_histogram(color = "white", binwidth = 200) +
labs(x = "Elevation (feet)", y = "Number of hikes")
```

-   Though not *necessary* to the code working, it's common, good practice to put a *line break* after each `+` (counterexample below). Why?

Each line is too long to read without line breaks.

```{r}
# YUCK 
ggplot(hikes, aes(x = elevation)) + geom_histogram(color = "white", binwidth = 200) + labs(x = "Elevation (feet)", y = "Number of hikes")
```


### Exercise 14: Practice {.unnumbered}

#### Part a {.unnumbered}

Practice your viz skills to learn about some of the variables in one of the following datasets from the previous class:

```{r}
# Data on students in this class
survey <- read.csv("https://hash-mac.github.io/stat112site-s25/data/survey.csv")

# World Cup data
world_cup <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv")
```

```{r}
  ggplot(world_cup, aes(x = host)) + geom_bar(color = "brown")
```
#### Part b {.unnumbered}

Check out the [RStudio Data Visualization cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf) to learn more features of `ggplot`.

::: {.callout-warning title="Check â†’ Commit â†’ Push"}
When done, don't forgot to click **Render Book** and check the resulting HTML files. If happy, jump to GitHub Desktop and commit the changes with the message **Finish activity 3** and push to GitHub.  Wait few seconds, then visit your portfolio website and make sure the changes are there.
:::
